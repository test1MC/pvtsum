<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="MyStatusFileTagSet.DO NOT TRANSLATE" MadCap:lastBlockDepth="6" MadCap:lastHeight="679" MadCap:lastWidth="510" MadCap:ignoredWords="TURNS;LANES;LANETURNS;CROSSWALKS;LINKID;POCKET;POCKETLENGTH;BLOCKEDVEHICLECLASSES;STOPLINEPOS;TRAFFICSIGN;DETECTORS;SCNO;PORTNO;POSOFFSET;LENGTH;AFFECTEDPTLINES;AFFECTEDVEHCLASSES;FROMLINKID;FROMLANEINDEX;TOLINK;TOLANEINDEX;BLOCKEDVEHCLASSES;LANETURNPOLY;SGNO;ORSGNO;CROSSWALK;CROSSWALKSIDE;LEFTSIDE;RIGHTSIDE;INLINKID;OUTLINKID;CHANNELIZEDTURN;CROSSWALKSIDES;PEDVOL;BIKEVOL;CONNECTORS;NODENO;DIRECTION;DRIVINGBEHAVIOUR;FROMNODENO;TONODENO;LINKTYPENO;SPEED;v0;REVERSELINK;LINKPOLY;TURNONRED;TRIANGLEISLANDLENGTH;SLO;ELO;SLOL;ELOL;CLO;FROMNODERADIUS;TONODERADIUS;SIGNALGROUPS;INTERGREENS;CYCLETIME;TIMEOFFSET;SIGNALIZATIONTYPE;Programfile;CYCLETIMEFIXED;PROGRAMNO;PROGRAMFILE;SUPPLYFILE1;SUPPLYFILE2;WTT1;GTSTART;GTSTART2;GTEND;GTEND2;RATIME;ATIME;MINGTIME;MINRTIME;ALLRED;SIGNALGROUPTYPE;FROMSGNO;TOSGNO;INTERGREEN;VEHTYPETIS;ROUTES;DEMANDS;FROMZONENO;TOZONENO;FALSE;NET;$USERATTDEF;LINEROUTE;SATURNBUSTRIPSPERHOURPCU;SATURN_V_CAP;SATURN_N;SATURN_STACKINGCAP;SATURN_LINKINDEX;SATURN_SIMULATIONLINK;SATURN_TRAVELTIMEPENALTY;SATURN_BANNED;SATURN_PRIORITY;SATURN_SATFLOW;SATURN_GAP;$NETWORK;SCALE;LEFTHANDTRAFFIC;RIGHTHANDTRAFFIC;LEFTDR;TURNTYPEDEFAULT;AUTOMATICICA;$TSYS;PrT;PuTWalk;BUSPCU;PuT;NOMADS;PCU;Walk;$DIRECTION;$NODE;nodes;NO;node;number;CONTROLTYPE;RailML®;Infrastructure;RollingStock;Timetable;Control;operationControlPoints;propService;passenger;formation;train;trainPart;trainPartSequence;trainParts;commercial;etc;trains;Train;category;trainPartSequences;Ankunfts;scope;published;kombinationen;pass;IC;Lr;Langenfelde" MadCap:conditions="PTV_Manual.Ready_for_translation">
    <head>
        <link href="../Resources/TableStyles/TipHint1.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../Resources/Stylesheets/PTV_Standard.css" rel="stylesheet" />
    </head>
    <body>
        <h3>
            <a name="2_daten_ueber_schnittstellen_austauschen_1567500566_1232601">
            </a>
            <a name="2_daten_ueber_schnittstellen_austauschen_1567500566_97446">
            </a>Hinweise zu den importierten railML<span class="_Override" style="font-size: 80%;vertical-align: super;">®</span>-Daten</h3>
        <p class="Text">
            <MadCap:keyword term="RailML:Hinweise zu importierten Daten" />Aus folgenden railML<span class="_Override" style="line-height: 10pt;font-size: 6.4pt;vertical-align: super;">®</span>-Teilschemata werden Elemente in <MadCap:variable name="PTV_Manual.Programmname" /> übernommen:</p>
        <ul>
            <LI class="List0">Infrastructure</LI>
            <LI class="List0">RollingStock</LI>
            <LI class="List0">Timetable</LI>
        </ul>
        <p class="Text">Nachfolgend wird erläutert, welche Elemente der einzelnen Teilschemata importiert werden und wie der Laufweg in <MadCap:variable name="PTV_Manual.Programmname" /> anhand der railML<span class="_Override" style="line-height: 10pt;font-size: 6.4pt;vertical-align: super;">®</span>-Daten ermittelt wird.</p>
        <h5>Zuordnung der Operation Control Points zu Haltepunkten</h5>
        <p class="Text">Aus dem Teilschema ‚Infrastructure‘ wird nur das Element ‚operationControlPoints‘ (OCPs) benutzt. Es enthält die im Fahrplan verwendeten Betriebsstellen. OCPs werden in <MadCap:variable name="PTV_Manual.Programmname" /> auf Haltepunkte abgebildet. Dazu wird je Eintrag die OCP-ID und das gewählte OCP-Korrespondenz-Attribut ausgelesen und in den Werten des Haltepunkt-Korrespondenz-Attributs nach diesem Attributwert gesucht. Alle passenden Haltepunkte werden weiter untersucht. Kommt der Wert nicht vor, kann der OCP nicht zugeordnet werden und er wird in der Protokolldatei aufgeführt. Normalerweise ist nur ein Teil der OCPs im <MadCap:variable name="PTV_Manual.Programmname" />-Zielnetz vorhanden. Der Import scheitert nicht, wenn ein OCP nicht zugeordnet werden kann. Es gibt aber eine Warnung mit der Möglichkeit, den Import abzubrechen, wenn ein verkehrlich relevanter OCP nicht zugeordnet werden kann. Ein OCP gilt dabei als verkehrlich relevant, wenn sein Element ‚propService‘ angegeben und darin das Attribut ‚passenger‘ wahr ist.</p>
        <p class="Text">Gibt es mehrere Haltepunkte im Zielnetz mit passendem Wert des Korrespondenzattributs, muss die genaue Zuordnung abhängig von Gleisinformation erfolgen. Ist die Verwendung von Gleisinformationen innerhalb der Betriebsstelle (OCP) abgeschaltet oder enthalten die Haltepunkte im Korrespondenzattribut für Gleisinformation ebenfalls gleiche Werte, scheitert die Zuordnung für diesen OCP ebenfalls.</p>
        <p class="Text">Ein Import bei nicht zugeordneten relevanten OCPs kann dazu führen, dass betroffene Fahrten Halte verlieren oder in mehrere Fahrten zerfallen.</p>
        <h5>
            <a name="2_daten_ueber_schnittstellen_austauschen_1567500566_1234160">
            </a>
            <a name="2_daten_ueber_schnittstellen_austauschen_1567500566_57201">
            </a>Ermittlung der Fahrzeuge (aus RollingStock)</h5>
        <p class="Text">Aus diesem Teilschema werden die Fahrzeuge (‚formation ID‘) übernommen. Je Triebfahrzeug entsteht ein Fahrtabschnitt, an den eine textuelle Repräsentation der Fahrzeuggruppe geschrieben wird, die dann nachträglich in konkrete Fahrzeugkombinationen umgesetzt werden kann. Die Anzahl der Einträge entspricht der Anzahl Triebfahrzeuge unter den Fahrzeugen der ‚formation‘.</p>
        <h5>Ermittlung der Fahrplanfahrten</h5>
        <p class="Text">Fahrplanfahrten und die dazugehörigen Objekte der Linienhierarchie in <MadCap:variable name="PTV_Manual.Programmname" /> werden aus den ‚train‘-Elementen aus dem railML<span class="_Override" style="line-height: 10pt;font-size: 6.4pt;vertical-align: super;">®</span>-Datenbestand erzeugt. Diese ‚train‘-Elemente tragen selbst keine Information zum Laufweg, sondern binden sogenannte ‚trainPart‘-Elemente ein. Diese tragen Informationen zum Laufweg und den Zeiten sowie – optional – zum Verkehrstag, zu Fahrzeugen, zum Betreiber, zur Linie und zur Kategorie. Ein ‚train‘-Element enthält dabei 1 bis n ‚trainPartSequence‘-Elemente, die wiederum 1 bis n ‚trainPart‘-Elemente referenzieren. Jedes ‚trainPartSequence‘-Element steht für einen örtlichen Abschnitt, die darin angezeigten ‚trainPart‘-Elemente sind Fahrzeuggruppen/Zugteile, die diesen örtlichen Abschnitt gemeinsam zurücklegen. Dementsprechend müssen die ‚ocptts‘, also die Orts- und Zeitangaben, an den nebeneinander in einem ‚trainPartSequence‘-Element auftretenden ‚trainParts‘ übereinstimmen.</p>
        <p class="Text">Diese Konstruktion ermöglicht zwei Sichten auf die gleichen Daten. Sie werden von Zügen des Typs ‚operational‘ und Zügen des Typs ‚commercial‘ realisiert. Ein Zug vom Typ ‚operational‘ beschreibt die Netz-Sicht, bei der zu jedem Zeitpunkt an jedem Ort nur ein Zug sein kann. Fahren mehrere Zugteile gemeinsam (Koppeln, Kurswagen etc.), gibt es nur einen operational train, der auf diesem örtlichen Abschnitt – also in dieser ‚trainPartSequence‘ – mehrere ‚trainParts‘ bindet. </p>
        <p class="Text">Der commercial train beschreibt die verkehrliche Sicht. Bei dieser Sichtweise nimmt jede Fahrzeuggruppe einen definierten Weg, möglicherweise über mehrere Zugnummern hinweg. Gemeinsam verkehrende Fahrzeuggruppen liegen daher in getrennten commercial trains vor. </p>
        <p class="Text">In <MadCap:variable name="PTV_Manual.Programmname" /> interessieren vor allem die ‚commercial trains‘. Jeder ‚commercial train‘ wird zu einer oder mehreren Fahrplanfahrten. ‚Train‘-Elemente vom Typ operational werden nicht als Fahrplanfahrten eingelesen.</p>
        <p class="Text">Der Laufweg einer Fahrplanfahrt, also die Daten ihrer Linienroute und ihres Fahrzeitprofils, ergibt sich abschnittsweise aus den Laufwegsdaten der eingebundenen ‚trainPart‘-Elemente. Dabei werden die ‚trainParts‘ – bis auf wenige Ausnahmefälle – zu Fahrplanfahrtabschnitten in <MadCap:variable name="PTV_Manual.Programmname" />.</p>
        <p class="Text">Die Daten einer Fahrplanfahrt werden aus einem ‚train‘-Element vom Typ ‚commercial‘ ermittelt, indem die ‚trainPartSequence‘-Einträge nacheinander wie folgt abgearbeitet werden:</p>
        <ul>
            <LI class="List0">Zunächst werden solche ‚trainParts‘, deren ‚category‘ nicht unter den einzulesenden Kategorien ist, ausgefiltert. Außerdem werden auch alle ‚trainParts‘ überlesen, deren Verkehrstag im vorgegebenen Filterzeitraum nicht verkehrt.</LI>
            <LI class="List0">Ist die ‚trainPartSequence‘ nicht leer und gab es bisher noch keinen Laufweg, wird das Verkehrssystem der Fahrplanfahrt festgelegt als das Verkehrssystem, welches der railML<span class="_Override" style="line-height: 10pt;font-size: 6.4pt;vertical-align: super;">®</span>-category‘ zugeordnet ist, zu der das erste ‚trainPart‘-Element gehört.</LI>
            <LI class="List0">Gibt es bereits einen Laufweg aus vorherigen ‚trainPartSequences‘, wird optional geprüft, ob das der Kategorie des ersten ‚trainPart‘ zugeordnete Verkehrssystem mit dem der Fahrplanfahrt übereinstimmt. Falls nicht, wird bei entsprechender Wahl der Optionen eine neue Fahrplanfahrt angelegt.</LI>
            <LI class="List0">Ist die ‚trainPartSequence‘ des ‚train‘ nach der Filterung leer, wird sie ignoriert. Gab es zuvor bereits eine nicht-leere ‚trainPartSequence‘ für die aktuelle Fahrt (dann hat die Fahrt bereits einen nicht-leeren Laufweg), wird eine neue Fahrt angelegt. Es entstehen dann also mehrere Fahrten aus dem gleichen commercial train.</LI>
            <LI class="List0">Ist die ‚trainPartSequence‘ nicht leer, wird für das erste gefundene ‚trainPart‘-Element der Laufweg ermittelt (die anderen ‚trainParts‘ müssen einen übereinstimmenden Laufweg haben). </LI>
            <LI class="List1">Dazu wird zunächst für jedes Auftreten einer Betriebsstelle im Laufweg (repräsentiert durch ein ‚ocptt‘-Element) die Betriebsstelle (OCP) einem Haltepunkt in <MadCap:variable name="PTV_Manual.Programmname" /> zugeordnet. Dies erfolgt durch Vergleich der Inhalte des Korrespondenzattributs auf Quellseite (railML<span class="_Override" style="line-height: 10pt;font-size: 6.4pt;vertical-align: super;">®</span>-Daten) und auf Zielseite (<MadCap:variable name="PTV_Manual.Programmname" />-Haltepunkt-Attribut). Gibt es mehrere infrage kommende Haltepunkte und wird Gleisinformation verwendet, wird derjenige Haltepunkt verwendet, der die angegebene Gleisinformation in seinem zweiten Korrespondenzattribut aufführt. Gelingt die Zuordnung für eine Betriebsstelle nicht, wird sie aus dem Laufweg entfernt.</LI>
            <LI class="List1">Ankunfts- und Abfahrtszeiten werden direkt aus den railML<span class="_Override" style="line-height: 10pt;font-size: 6.4pt;vertical-align: super;">®</span>-Daten übernommen, wobei die Zeiten aus dem ‚scope‘ ‚published‘ bevorzugt werden.</LI>
            <LI class="List1">Wird auch Streckeninformation verwendet, werden von jedem Haltepunkt im Laufweg ausgehend Strecken mit der angegebenen Streckennummer (im Sinne von Kursbuchstrecken, nicht <MadCap:variable name="PTV_Manual.Programmname" />-Streckennummer) und Richtung gesucht und dadurch der Weg zum nachfolgenden Haltepunkt genau festgelegt. Werden keine passenden Strecken gefunden, erfolgt eine Kurzwegsuche im Zielnetz zum nachfolgenden Haltepunkt.</LI>
            <LI class="List1">Erfolgt der Import ohne Nutzung von Streckeninformationen, erfolgt eine Kurzwegsuche von jedem Haltepunkt zu seinem Nachfolger im Laufweg.</LI>
            <LI class="List1">In jedem Fall bilden die gefundenen Wege zwischen den Haltepunkten zusammen die Linienroute.</LI>
            <LI class="List0">Aus jedem ‚trainPart‘-Element einer ‚trainPartSequence‘ entstehen ein oder mehrere Fahrplanfahrtabschnitte. Die Anzahl der Fahrplanfahrtabschnitte entspricht der Anzahl der Triebfahrzeuge, die in der in den railML<span class="_Override" style="line-height: 10pt;font-size: 6.4pt;vertical-align: super;">®</span>-Daten zu diesem ‚trainPart‘ angegebenen ‚formation‘ enthalten sind. Jeder Fahrplanfahrtabschnitt erhält als Fahrzeuginformation einen Text, der diese ‚formation‘ beschreibt. Es werden keine Fahrzeugeinheiten und -kombinationen im Zielnetz angelegt und zugeordnet.</LI>
            <LI class="List1">Im Normalfall ist jeder der Fahrplanfahrtabschnitte ausgedehnt über genau den Teil des Laufwegs, der von dieser ‚trainPartSequence‘ stammt, und mit dem Verkehrstag des ‚trainPart‘-Elements versehen.</LI>
            <LI class="List1">Eine Ausnahme bildet der Fall, wo der Wechsel von einer ‚trainPartSequence‘ zur nachfolgenden mit einer Durchfahrt (‚ocptt‘ vom Typ ‚pass‘) zusammenfällt. Im Datenmodell von <MadCap:variable name="PTV_Manual.Programmname" /> kann ein Fahrplanfahrtabschnitt nur an einem Halt beginnen oder enden. Deswegen erstrecken sich in diesem Fall die Fahrplanfahrtabschnitte über den mit einer Durchfahrt verbundenen ‚trainPartSequence‘-Wechsel hinweg. Es kommt dann zu Verzerrungen der Daten, wenn die Zuggarnitur (‚formation‘) oder der Verkehrstag dort wechselt. Dies ist aber als Datenfehler in den Eingangsdaten anzusehen.</LI>
            <LI class="List1">Eine weitere Ausnahme bildet der Fall, dass die Fahrplanfahrt auf zwei aufeinander folgenden ‚trainPartSequence‘-Elementen mit den gleichen Partnern gekoppelt ist. Da in <MadCap:variable name="PTV_Manual.Programmname" /> Fahrplanfahrtabschnitte nicht im Koppelbereich beginnen oder enden dürfen, werden auch hier die Fahrplanfahrtabschnitte über den Wechsel hinweg ausgedehnt oder aber alternativ die Kopplung vernachlässigt.</LI>
        </ul>
        <p class="Text">Ist eine Fahrplanfahrt einschließlich ihrer Fahrtabschnitte auf diese Weise konstruiert worden, werden Fahrplanfahrtabschnitte, die sich örtlich nicht überlappen, aber den gleichen Verkehrstag und gleiche Fahrzeuginformation (und weitere Information) tragen, zusammengefasst. </p>
        <p class="Tabledist">&#160;</p>
        <table class="TableStyle-TipHint1" style="width: 495px;caption-side: top;mc-table-style: url('../Resources/TableStyles/TipHint1.css');" cellspacing="0">
            <col width="495px" class="TableStyle-TipHint1-Column-Column1" />
            <tbody>
                <tr class="TableStyle-TipHint1-Body-Body1">
                    <td class="TableStyle-TipHint1-BodyA-Column1-Body1">
                        <p class="Hint" MadCap:autonum="Hinweis: ">Sie können die Anzahl der Kalendertage, in denen ein Fahrtabschnitt verkehrt, in ein <MadCap:variable name="PTV_Manual.Programmname" />-Attribut des Fahrplanfahrtabschnitts ausgeben, um auf dieser Basis Hochrechnungsfaktoren zu bestimmen. Ordnen Sie hierzu im Fenster <span class="gui_element">Import von RailML</span>im Register <span class="gui_element">Attribute</span> der <span class="gui_element">Anzahl Vorkommen</span> das gewünschte Zielattribut zu oder legen Sie ein benutzerdefiniertes Attribut an <MadCap:xref class="sieheUeberschrSeite" href="2_13_RailML-Daten importieren.htm#2_daten_ueber_schnittstellen_austauschen_1567500566_1227686"><span style="color: Black;" class="mcFormatColor">(</span><u>RailML®-Daten importieren</u><span style="color: Black;" class="mcFormatColor">)</span></MadCap:xref>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h5>Ermittlung von Kopplungen</h5>
        <p class="Text">Eine Koppelgruppe entsteht in <MadCap:variable name="PTV_Manual.Programmname" />, wenn zwei oder mehr ‚trainPart‘-Elemente aus verschiedenen ‚commercial trains‘ in einem ‚operational train‘ gemeinsam, d.h. innerhalb der gleichen ‚trainPartSequence‘ verkehren. Es werden also die ‚operational trains‘ ausgelesen und auf solche ‚trainPartSequence‘-Elemente hin untersucht. Für jede gefundene ‚trainPartSequence‘, die zu verschiedenen ‚commercial trains‘ gehörige ‚trainPart‘-Elemente enthält, wird eine Kopplung über dem durch sie beschriebenen Teil des Laufwegs erzeugt.</p>
        <p class="Text">Beispiel zur Filterung der Kategorien: Die Filterung der Kategorien ist nützlich, um in <MadCap:variable name="PTV_Manual.Programmname" /> normalerweise unerwünschte Zu- und Abführungen abzuschneiden. Ein typischer Zuglauf eines IC ab Hamburg beginnt beispielsweise nicht in Altona, sondern mit einer Fahrt als Leerreisezug (Lr) von Langenfelde nach Altona. Diese wird in railML<span class="_Override" style="line-height: 10pt;font-size: 6.4pt;vertical-align: super;">®</span> als eigener ‚trainPart‘ mit eigener ‚trainPartSequence‘ dargestellt und normalerweise ausgefiltert, sodass die Fahrplanfahrt in <MadCap:variable name="PTV_Manual.Programmname" /> tatsächlich erst in Hamburg-Altona beginnt und dann das Produkt IC hat und nicht Lr.</p>
    </body>
</html>